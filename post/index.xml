<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on BoBo Dev Notes</title>
    <link>https://ivywang122.github.io/blog/post/</link>
    <description>Recent content in Posts on BoBo Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 Apr 2018 13:21:01 +0800</lastBuildDate>
    
	<atom:link href="https://ivywang122.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C＃ Notes: 進入初學者村</title>
      <link>https://ivywang122.github.io/blog/blog/2018/04/c-notes-%E9%80%B2%E5%85%A5%E5%88%9D%E5%AD%B8%E8%80%85%E6%9D%91/</link>
      <pubDate>Thu, 26 Apr 2018 13:21:01 +0800</pubDate>
      
      <guid>https://ivywang122.github.io/blog/blog/2018/04/c-notes-%E9%80%B2%E5%85%A5%E5%88%9D%E5%AD%B8%E8%80%85%E6%9D%91/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;本篇為夜間去台大修 C# 整理的初學者筆記。目前理解 Visual Studio 為一個 IDE (整合開發環境)，可以開發跨裝置的應用程式。而 C# 為物件導向的程式語言，可以建置各種在 .NET Framework 上執行的應用程式。更多詳細內容 Microsoft 已有提供文件教學：&lt;a href=&#34;https://docs.microsoft.com/zh-tw/dotnet/csharp/getting-started/introduction-to-the-csharp-language-and-the-net-framework&#34;&gt;C# 語言和 .NET Framework 簡介&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;若之後有新的心得與筆記內容，會繼續編輯本篇文章。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS Notes: bind(), call() &amp; apply()</title>
      <link>https://ivywang122.github.io/blog/blog/2018/04/js-notes-bind-call--apply/</link>
      <pubDate>Tue, 17 Apr 2018 09:58:41 +0800</pubDate>
      
      <guid>https://ivywang122.github.io/blog/blog/2018/04/js-notes-bind-call--apply/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;當程式開始執行全域的執行環境 (Global Execution Context) 被創造，第一階段 creation phase 會產生全域物件 (Global Object)、this 變數、外部環境 (Outer Environment) 和抬升 (Hoisting) 中的變數和函數，這邊的 this 指的是 Global Object。&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://ivywang122.github.io/blog/img/0417-1.jpg&#34; alt=&#34;Global Execution Context&#34; width=&#34;500&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Global Execution Context&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;而當我們希望可以去調整函數中 this 指的對象，可以透過 JavaScript 中函數物件的方法：&lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;apply()&lt;/code&gt; &amp;amp; &lt;code&gt;bind()&lt;/code&gt; 來控制 this 變數。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS Notes: Closure 閉包 &amp; Callback 回呼</title>
      <link>https://ivywang122.github.io/blog/blog/2018/04/js-notes-closure-%E9%96%89%E5%8C%85--callback-%E5%9B%9E%E5%91%BC/</link>
      <pubDate>Mon, 16 Apr 2018 15:52:12 +0800</pubDate>
      
      <guid>https://ivywang122.github.io/blog/blog/2018/04/js-notes-closure-%E9%96%89%E5%8C%85--callback-%E5%9B%9E%E5%91%BC/</guid>
      <description>&lt;h1 id=&#34;了解閉包&#34;&gt;了解閉包&lt;/h1&gt;

&lt;p&gt;參考 MDN 文件：&lt;a href=&#34;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures&#34;&gt;Closure&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;閉包(Closure) 是函數的組合，以及該宣告函數所包含的作用域環境(lexical environment)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 GitHub &amp; Hugo 架設個人Blog</title>
      <link>https://ivywang122.github.io/blog/blog/2018/03/%E4%BD%BF%E7%94%A8-github--hugo-%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BAblog/</link>
      <pubDate>Wed, 21 Mar 2018 10:56:38 +0800</pubDate>
      
      <guid>https://ivywang122.github.io/blog/blog/2018/03/%E4%BD%BF%E7%94%A8-github--hugo-%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BAblog/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;Hugo 是一個由Golang實現的靜態網站生成器(Static Site Generator, SSG)，不像WordPress, Ghost 和 Drupal 要花較多時間建立頁面，還有後續動態頁面更新的問題及安全性等隱憂。由於不是每個網站都需要 Server 來動態生成內容，串接資料庫等需求，像是企業網、筆記文件、Blog等，SSG 就是它實用的地方。&lt;/p&gt;

&lt;p&gt;而 SSG 的優點在於：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;快速部署，維護簡單，可拓展性高，高效能返回已渲染好的網頁
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>