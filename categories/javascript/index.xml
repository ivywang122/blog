<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on BoBo Dev Notes</title>
    <link>https://ivywang122.github.io/blog/categories/javascript/</link>
    <description>Recent content in Javascript on BoBo Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 May 2018 15:28:16 +0800</lastBuildDate>
    
	<atom:link href="https://ivywang122.github.io/blog/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS Notes: 嚴格模式</title>
      <link>https://ivywang122.github.io/blog/blog/2018/05/js-notes-%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 02 May 2018 15:28:16 +0800</pubDate>
      
      <guid>https://ivywang122.github.io/blog/blog/2018/05/js-notes-%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;嚴格模式對 JavaScript 語意上做了一些修正：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;透過拋出錯誤的方式，消除 JavaScript 默認上的錯誤&lt;/li&gt;
&lt;li&gt;修正會阻礙 JavaScript 引擎進行最佳化的錯誤，相同的程式碼使用嚴格模式可以比非嚴格模式運作更快&lt;/li&gt;
&lt;li&gt;禁止使用一些有可能會被未來版本 ECMAScript 定義的語法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS Notes: 物件導向和原型繼承</title>
      <link>https://ivywang122.github.io/blog/blog/2018/04/js-notes-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E5%92%8C%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BF/</link>
      <pubDate>Wed, 18 Apr 2018 10:16:00 +0800</pubDate>
      
      <guid>https://ivywang122.github.io/blog/blog/2018/04/js-notes-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E5%92%8C%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BF/</guid>
      <description>&lt;h1 id=&#34;繼承&#34;&gt;繼承&lt;/h1&gt;

&lt;p&gt;一個物件取用另一個物件的屬性或是方法，回歸本質來思考，繼承的目的就是在擴充原有物件定義不足的地方。不同程式語言的物件導向特性可分為：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;古典繼承 (Classical Inheritance)&lt;/li&gt;
&lt;li&gt;原型繼承 (Prototypal Inheritance)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而在 JavaScript 中使用的是原型繼承 (Prototypal Inheritance)。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS Notes: bind(), call() &amp; apply()</title>
      <link>https://ivywang122.github.io/blog/blog/2018/04/js-notes-bind-call--apply/</link>
      <pubDate>Tue, 17 Apr 2018 09:58:41 +0800</pubDate>
      
      <guid>https://ivywang122.github.io/blog/blog/2018/04/js-notes-bind-call--apply/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;當程式開始執行全域的執行環境 (Global Execution Context) 被創造，第一階段 creation phase 會產生全域物件 (Global Object)、this 變數、外部環境 (Outer Environment) 和抬升 (Hoisting) 中的變數和函數，這邊的 this 指的是 Global Object。&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://ivywang122.github.io/blog/img/0417-1.jpg&#34; alt=&#34;Global Execution Context&#34; width=&#34;500&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Global Execution Context (from Udemy JavaScript: Understanding the Weird Parts)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;而當我們希望可以去調整函數中 this 指的對象，可以透過 JavaScript 中函數物件的方法：&lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;apply()&lt;/code&gt; &amp;amp; &lt;code&gt;bind()&lt;/code&gt; 來控制 this 變數。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS Notes: Closure 閉包 &amp; Callback 回呼</title>
      <link>https://ivywang122.github.io/blog/blog/2018/04/js-notes-closure-%E9%96%89%E5%8C%85--callback-%E5%9B%9E%E5%91%BC/</link>
      <pubDate>Mon, 16 Apr 2018 15:52:12 +0800</pubDate>
      
      <guid>https://ivywang122.github.io/blog/blog/2018/04/js-notes-closure-%E9%96%89%E5%8C%85--callback-%E5%9B%9E%E5%91%BC/</guid>
      <description>&lt;h1 id=&#34;了解閉包&#34;&gt;了解閉包&lt;/h1&gt;

&lt;p&gt;參考 MDN 文件：&lt;a href=&#34;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures&#34;&gt;Closure&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;閉包(Closure) 是函數的組合，以及該宣告函數所包含的作用域環境(lexical environment)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>